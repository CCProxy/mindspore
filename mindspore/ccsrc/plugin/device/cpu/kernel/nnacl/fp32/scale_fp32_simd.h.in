/**
 * Copyright 2022 Huawei Technologies Co., Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef MINDSPORE_NNACL_FP32_SCALE_@SIMD_INSTRUCTION@_H_
#define MINDSPORE_NNACL_FP32_SCALE_@SIMD_INSTRUCTION@_H_

#include "nnacl/intrinsics/ms_simd_instructions.h"
#include "nnacl/intrinsics/ms_simd_@SIMD_INSTRUCTION_LOWER@_instructions.h"

#ifdef __cplusplus
extern "C" {
#endif
@SIMD_INSTRUCTION_BEGIN@

static inline int DoScalePatternOne@SIMD_INSTRUCTION@(int index, const float *src, const float scale,
                                                      const float bias, float *out, int size) {
  SIMD_F32 scale_vec = SIMD_MOV_F32(scale);
  SIMD_F32 bias_vec = SIMD_MOV_F32(bias);
  for (int block_max_size = size - BLOCK_NUM + 1; index < block_max_size; index += BLOCK_NUM) {
    SIMD_F32 src_vec = SIMD_LD_F32(src + index);
    SIMD_F32 vout = SIMD_FMADD_F32(src_vec, scale_vec, bias_vec);
    SIMD_ST_F32(out + index, vout);
  }
  return index;
}

static inline int DoScalePatternTwo@SIMD_INSTRUCTION@(int index, const float *src, const float *scale,
                                                      const float *bias, float *out, int size) {
  for (int block_max_size = size - BLOCK_NUM + 1; index < block_max_size; index += BLOCK_NUM) {
    SIMD_F32 src_vec = SIMD_LD_F32(src + index);
    SIMD_F32 scale_vec = SIMD_LD_F32(scale + index);
    SIMD_F32 bias_vec = SIMD_LD_F32(bias + index);
    SIMD_F32 vout = SIMD_FMADD_F32(src_vec, scale_vec, bias_vec);
    SIMD_ST_F32(out + index, vout);
  }
  return index;
}

static inline int DoScalePatternThird@SIMD_INSTRUCTION@(int index, const float *src, const float scale,
                                                        const float *bias, float *out, int size) {
  SIMD_F32 scale_vec = SIMD_MOV_F32(scale);
  for (int block_max_size = size - BLOCK_NUM + 1; index < block_max_size; index += BLOCK_NUM) {
    SIMD_F32 src_vec = SIMD_LD_F32(src + index);
    SIMD_F32 bias_vec = SIMD_LD_F32(bias + index);
    SIMD_F32 vout = SIMD_FMADD_F32(src_vec, scale_vec, bias_vec);
    SIMD_ST_F32(out + index, vout);
  }
  return index;
}

static inline int DoScalePatternOneRelu@SIMD_INSTRUCTION@(int index, const float *src, const float scale,
                                                          const float bias, float *out, int size) {
  SIMD_F32 scale_vec = SIMD_MOV_F32(scale);
  SIMD_F32 bias_vec = SIMD_MOV_F32(bias);
  SIMD_F32 zero = SIMD_SET0_F32;
  for (int block_max_size = size - BLOCK_NUM + 1; index < block_max_size; index += BLOCK_NUM) {
    SIMD_F32 src_vec = SIMD_LD_F32(src + index);
    SIMD_F32 vout = SIMD_MAX_F32(SIMD_FMADD_F32(src_vec, scale_vec, bias_vec), zero);
    SIMD_ST_F32(out + index, vout);
  }
  return index;
}

static inline int DoScalePatternTwoRelu@SIMD_INSTRUCTION@(int index, const float *src, const float *scale,
                                                          const float *bias, float *out, int size) {
  SIMD_F32 zero = SIMD_SET0_F32;
  for (int block_max_size = size - BLOCK_NUM + 1; index < block_max_size; index += BLOCK_NUM) {
    SIMD_F32 src_vec = SIMD_LD_F32(src + index);
    SIMD_F32 scale_vec = SIMD_LD_F32(scale + index);
    SIMD_F32 bias_vec = SIMD_LD_F32(bias + index);
    SIMD_F32 vout = SIMD_MAX_F32(SIMD_FMADD_F32(src_vec, scale_vec, bias_vec), zero);
    SIMD_ST_F32(out + index, vout);
  }
  return index;
}

static inline int DoScalePatternThirdRelu@SIMD_INSTRUCTION@(int index, const float *src, const float scale,
                                                            const float *bias, float *out, int size) {
  SIMD_F32 scale_vec = SIMD_MOV_F32(scale);
  SIMD_F32 zero = SIMD_SET0_F32;
  for (int block_max_size = size - BLOCK_NUM + 1; index < block_max_size; index += BLOCK_NUM) {
    SIMD_F32 src_vec = SIMD_LD_F32(src + index);
    SIMD_F32 bias_vec = SIMD_LD_F32(bias + index);
    SIMD_F32 vout = SIMD_MAX_F32(SIMD_FMADD_F32(src_vec, scale_vec, bias_vec), zero);
    SIMD_ST_F32(out + index, vout);
  }
  return index;
}

static inline int DoScalePatternOneRelu6@SIMD_INSTRUCTION@(int index, const float *src, const float scale,
                                                           const float bias, float *out, int size) {
  SIMD_F32 scale_vec = SIMD_MOV_F32(scale);
  SIMD_F32 bias_vec = SIMD_MOV_F32(bias);
  SIMD_F32 zero = SIMD_SET0_F32;
  SIMD_F32 six = SIMD_MOV_F32(6.0f);
  for (int block_max_size = size - BLOCK_NUM + 1; index < block_max_size; index += BLOCK_NUM) {
    SIMD_F32 src_vec = SIMD_LD_F32(src + index);
    SIMD_F32 vout = SIMD_CLAMP_F32(SIMD_FMADD_F32(src_vec, scale_vec, bias_vec), zero, six);
    SIMD_ST_F32(out + index, vout);
  }
  return index;
}

static inline int DoScalePatternTwoRelu6@SIMD_INSTRUCTION@(int index, const float *src, const float *scale,
                                                           const float *bias, float *out, int size) {
  SIMD_F32 zero = SIMD_SET0_F32;
  SIMD_F32 six = SIMD_MOV_F32(6.0f);
  for (int block_max_size = size - BLOCK_NUM + 1; index < block_max_size; index += BLOCK_NUM) {
    SIMD_F32 src_vec = SIMD_LD_F32(src + index);
    SIMD_F32 scale_vec = SIMD_LD_F32(scale + index);
    SIMD_F32 bias_vec = SIMD_LD_F32(bias + index);
    SIMD_F32 vout = SIMD_CLAMP_F32(SIMD_FMADD_F32(src_vec, scale_vec, bias_vec), zero, six);
    SIMD_ST_F32(out + index, vout);
  }
  return index;
}

static inline int DoScalePatternThirdRelu6@SIMD_INSTRUCTION@(int index, const float *src, const float scale,
                                                             const float *bias, float *out, int size) {
  SIMD_F32 scale_vec = SIMD_MOV_F32(scale);
  SIMD_F32 zero = SIMD_SET0_F32;
  SIMD_F32 six = SIMD_MOV_F32(6.0f);
  for (int block_max_size = size - BLOCK_NUM + 1; index < block_max_size; index += BLOCK_NUM) {
    SIMD_F32 src_vec = SIMD_LD_F32(src + index);
    SIMD_F32 bias_vec = SIMD_LD_F32(bias + index);
    SIMD_F32 vout = SIMD_CLAMP_F32(SIMD_FMADD_F32(src_vec, scale_vec, bias_vec), zero, six);
    SIMD_ST_F32(out + index, vout);
  }
  return index;
}

@SIMD_INSTRUCTION_END@
#ifdef __cplusplus
}
#endif
#endif